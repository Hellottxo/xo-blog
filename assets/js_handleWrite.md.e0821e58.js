import{_ as n,c as s,o as a,a as t}from"./app.9bd94a15.js";const y='{"title":"\u624B\u5199\u7CFB\u5217","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. \u624B\u5199 call","slug":"_1-\u624B\u5199-call"},{"level":2,"title":"2. \u624B\u5199 apply","slug":"_2-\u624B\u5199-apply"},{"level":2,"title":"3. \u624B\u5199 bind","slug":"_3-\u624B\u5199-bind"},{"level":2,"title":"4. \u624B\u5199 new","slug":"_4-\u624B\u5199-new"},{"level":2,"title":"5. \u624B\u5199 instanceof","slug":"_5-\u624B\u5199-instanceof"},{"level":2,"title":"6. \u624B\u5199\u9632\u6296\u51FD\u6570","slug":"_6-\u624B\u5199\u9632\u6296\u51FD\u6570"},{"level":2,"title":"7. \u624B\u5199\u8282\u6D41\u51FD\u6570","slug":"_7-\u624B\u5199\u8282\u6D41\u51FD\u6570"},{"level":2,"title":"8. \u5229\u7528 reduce \u5B9E\u73B0 map/filter","slug":"_8-\u5229\u7528-reduce-\u5B9E\u73B0-map-filter"},{"level":2,"title":"9. \u6A21\u62DF Symbol","slug":"_9-\u6A21\u62DF-symbol"},{"level":2,"title":"10. \u6A21\u62DF for...of","slug":"_10-\u6A21\u62DF-for-of"},{"level":2,"title":"11. \u6A21\u62DF Set","slug":"_11-\u6A21\u62DF-set"},{"level":2,"title":"12. deepClone","slug":"_12-deepclone"}],"relativePath":"js/handleWrite.md","lastUpdated":1645672724000}',p={},o=t(`<h1 id="\u624B\u5199\u7CFB\u5217" tabindex="-1">\u624B\u5199\u7CFB\u5217 <a class="header-anchor" href="#\u624B\u5199\u7CFB\u5217" aria-hidden="true">#</a></h1><h2 id="_1-\u624B\u5199-call" tabindex="-1">1. \u624B\u5199 call <a class="header-anchor" href="#_1-\u624B\u5199-call" aria-hidden="true">#</a></h2><p><code>call()</code>\u7528\u4E8E\u6307\u5B9A this \u548C\u4E00\u4E2A\u6216\u591A\u4E2A\u53C2\u6570\u6765\u8C03\u7528\u51FD\u6570\u3002</p><div class="language-js"><pre><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. \u68C0\u6D4B\u662F\u5426\u4F20\u5165\u4E86thisArgs,\u6CA1\u6709\u5219\u9ED8\u8BA4\u4F7F\u7528window</span>
  <span class="token comment">// 2. \u4F7F\u7528Object()\u65B9\u6CD5\u521D\u59CB\u5316\u57FA\u7840\u7C7B\u578B\u503C\u4E3A\u5BF9\u8C61</span>
  context <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">||</span> window<span class="token punctuation">;</span>
  <span class="token comment">// 3. \u7ED9\u5F53\u524D\u5BF9\u8C61\u8BBE\u7F6E\u4E00\u4E2Afn\u5C5E\u6027\uFF0C\u503C\u4E3A\u8C03\u7528\u7684\u65B9\u6CD5</span>
  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token comment">// 4. \u5C06\u4F20\u5165\u7684\u53C2\u6570\u4F5C\u4E3A\u5165\u53C2\uFF0C\u6267\u884Cfn\uFF0C\u5E76\u5C06\u51FD\u6570\u8FD4\u56DE\u503C\u4F5C\u4E3A\u9ED8\u8BA4\u7684\u8FD4\u56DE\u503C</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 5. \u5220\u9664fn\u5C5E\u6027\uFF0C\u6D88\u9664\u5F71\u54CD</span>
  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
  <span class="token comment">// 6. \u8FD4\u56DE\u9ED8\u8BA4\u503C</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_2-\u624B\u5199-apply" tabindex="-1">2. \u624B\u5199 apply <a class="header-anchor" href="#_2-\u624B\u5199-apply" aria-hidden="true">#</a></h2><p><code>call()</code>\u548C<code>applly()</code>\u7684\u533A\u522B\u5728\u4E8E\uFF0C<code>call()</code>\u63A5\u53D7\u4E00\u4E2A\u53C2\u6570\u5217\u8868\uFF0C<code>apply()</code>\u63A5\u53D7\u4E00\u4E2A\u53C2\u6570\u6570\u7EC4\u3002</p><div class="language-js"><pre><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">||</span> window<span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token operator">!</span>args <span class="token operator">?</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    delte context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_3-\u624B\u5199-bind" tabindex="-1">3. \u624B\u5199 bind <a class="header-anchor" href="#_3-\u624B\u5199-bind" aria-hidden="true">#</a></h2><p><code>bind()</code>\u8FD4\u56DE\u4E00\u4E2A\u62F7\u8D1D\u7684\u539F\u51FD\u6570\uFF0C\u8BE5\u51FD\u6570\u6307\u5B9A\u4E86 this \u53CA\u9ED8\u8BA4\u521D\u59CB\u53C2\u6570\u3002</p><div class="language-js"><pre><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> <span class="token operator">...</span>defaultArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  context <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">||</span> window<span class="token punctuation">;</span>
  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">fn</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> context<span class="token punctuation">,</span> <span class="token punctuation">[</span>
      <span class="token operator">...</span>defaultArgs<span class="token punctuation">,</span>
      <span class="token operator">...</span>args<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// bind\u540E\u8FD4\u56DE\u7684\u51FD\u6570\u4E0D\u5B58\u5728prototype</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_4-\u624B\u5199-new" tabindex="-1">4. \u624B\u5199 new <a class="header-anchor" href="#_4-\u624B\u5199-new" aria-hidden="true">#</a></h2><p><code>new</code>\u64CD\u4F5C\u7B26\u5B9E\u9645\u4E0A\u4F1A\u7ECF\u5386\u4EE5\u4E0B\u4E09\u4E2A\u6B65\u9AA4\uFF1A</p><ol><li>\u4EE5\u6784\u9020\u51FD\u6570\u7684 prototype \u5C5E\u6027\u4E3A\u539F\u578B\u521B\u5EFA\u65B0\u7684\u5BF9\u8C61</li><li>\u4EE5 obj \u4E3A context\uFF0C\u6267\u884C\u6784\u9020\u51FD\u6570\uFF08\u56E0\u6B64 this \u6307\u5411\u65B0\u5BF9\u8C61\uFF09</li><li>\u6267\u884C\u6784\u9020\u51FD\u6570\u7684\u8FD4\u56DE\u503C\u5982\u679C\u662F\u5F15\u7528\u7C7B\u578B\uFF0C\u5219\u8FD4\u56DE\u8BE5\u7ED3\u679C\uFF0C\u5982\u679C\u4E0D\u662F\u6216\u6CA1\u6709\u8FD4\u56DE\u503C\u5219\u8FD4\u56DE\u65B0\u5BF9\u8C61</li></ol><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. \u4EE5func.prototype\u4E3A\u539F\u578B\u521B\u5EFA\u4E00\u4E2A\u65B0\u7684\u5BF9\u8C61obj</span>
  <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 2. \u4EE5obj\u4E3Acontext\uFF0C\u6267\u884Cfunc</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 3. res\u662F\u5426\u662F\u5F15\u7528\u7C7B\u578B\uFF0C\u4E0D\u662F\u5219\u8FD4\u56DE\u65B0\u5EFA\u5BF9\u8C61obj</span>
  <span class="token keyword">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_5-\u624B\u5199-instanceof" tabindex="-1">5. \u624B\u5199 instanceof <a class="header-anchor" href="#_5-\u624B\u5199-instanceof" aria-hidden="true">#</a></h2><p><code>instanceof</code>\u7528\u4E8E\u786E\u5B9A\u539F\u578B\u548C\u5B9E\u4F8B\u4E4B\u95F4\u7684\u5173\u7CFB\u3002</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">myinstanceof</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> origin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. \u57FA\u7840\u6570\u636E\u7C7B\u578B\u76F4\u63A5\u8FD4\u56DEfalse</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> target <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment">// 2. \u83B7\u53D6target\u7684[[prototype]]</span>
  <span class="token keyword">let</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proto <span class="token operator">===</span> origin<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. \u5728target\u7684[[prototype]]\u94FE\u4E0A\u7EE7\u7EED\u5BFB\u627Etarget</span>
    proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>proto<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_6-\u624B\u5199\u9632\u6296\u51FD\u6570" tabindex="-1">6. \u624B\u5199\u9632\u6296\u51FD\u6570 <a class="header-anchor" href="#_6-\u624B\u5199\u9632\u6296\u51FD\u6570" aria-hidden="true">#</a></h2><p>\u9632\u6296\uFF1A\u89E6\u53D1\u4E8B\u4EF6\u6307\u5B9A\u65F6\u95F4\u540E\u624D\u6267\u884C\u51FD\u6570\uFF0C\u5982\u679C\u5728\u6307\u5B9A\u65F6\u95F4\u5185\u518D\u6B21\u89E6\u53D1\uFF0C\u5219\u91CD\u65B0\u51FD\u6570\u6267\u884C\u7684\u65F6\u95F4\u3002</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> immediate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> callNow <span class="token operator">=</span> <span class="token operator">!</span>timer<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_7-\u624B\u5199\u8282\u6D41\u51FD\u6570" tabindex="-1">7. \u624B\u5199\u8282\u6D41\u51FD\u6570 <a class="header-anchor" href="#_7-\u624B\u5199\u8282\u6D41\u51FD\u6570" aria-hidden="true">#</a></h2><p>\u8282\u6D41\uFF1A\u8FDE\u7EED\u7684\u89E6\u53D1\u4E8B\u4EF6\uFF0C\u4F46\u5728\u6307\u5B9A\u65F6\u95F4\u5185\u53EA\u89E6\u53D1\u4E00\u6B21\u3002</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">funtion</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_8-\u5229\u7528-reduce-\u5B9E\u73B0-map-filter" tabindex="-1">8. \u5229\u7528 reduce \u5B9E\u73B0 map/filter <a class="header-anchor" href="#_8-\u5229\u7528-reduce-\u5B9E\u73B0-map-filter" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myMap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> thisArg <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur\uFF0C index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        prev<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> prev<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myFilter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> thisArg <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">)</span> prev<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> prev<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_9-\u6A21\u62DF-symbol" tabindex="-1">9. \u6A21\u62DF Symbol <a class="header-anchor" href="#_9-\u6A21\u62DF-symbol" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> generateUniqueKey <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> postfix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">descString</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      postfix<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">@@</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>descString<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>postfix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">SymbolPolyfill</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">des</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If NewTarget is not undefined, throw a TypeError exception.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">SymbolPolyfill</span><span class="token punctuation">)</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;Symbol is not a constructor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// If description is undefined, let descString be undefined.</span>
    <span class="token comment">// Else, let descString be ToString(description).</span>
    <span class="token keyword">const</span> descString <span class="token operator">=</span> des <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Return a new unique Symbol value whose [[Description]] value is descString.</span>
    <span class="token keyword">const</span> symbol <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__name__<span class="token punctuation">,</span>
      <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">__Description__</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> des<span class="token punctuation">,</span>
        <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">__name__</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token function">generateUniqueKey</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> symbol<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// \u7528\u4E8E\u5B9E\u73B0\`Symbol.for()\`\u3001\`Symbol.keyFor()\`</span>
  <span class="token keyword">const</span> forMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>SymbolPolyfill<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">des</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> descString <span class="token operator">=</span> des <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span>des<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> forMap<span class="token punctuation">[</span>descString<span class="token punctuation">]</span>
          <span class="token operator">?</span> forMap<span class="token punctuation">[</span>descString<span class="token punctuation">]</span>
          <span class="token operator">:</span> <span class="token punctuation">(</span>forMap<span class="token punctuation">[</span>descString<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">SymbolPolyfill</span><span class="token punctuation">(</span>descString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">keyFor</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">symbol</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> forMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>forMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> symbol<span class="token punctuation">)</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  root<span class="token punctuation">.</span>SymbolPolyfill <span class="token operator">=</span> SymbolPolyfill<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_10-\u6A21\u62DF-for-of" tabindex="-1">10. \u6A21\u62DF for...of <a class="header-anchor" href="#_10-\u6A21\u62DF-for-of" aria-hidden="true">#</a></h2><p>ES6 \u89C4\u5B9A\uFF0C\u9ED8\u8BA4\u7684 <code>Iterator</code> \u63A5\u53E3\u90E8\u7F72\u5728\u6570\u636E\u7ED3\u6784\u7684 <code>Symbol.iterator</code> \u5C5E\u6027\u3002 \u5373\uFF0C\u4E00\u4E2A\u6570\u636E\u7ED3\u6784\u53EA\u8981\u5177\u6709 <code>Symbol.iterator</code> \u5C5E\u6027\uFF0C\u5C31\u53EF\u4EE5\u8BA4\u4E3A\u662F\u201C\u53EF\u904D\u5386\u7684\u201D\uFF08iterable\uFF09\u3002 \u5F53\u4F7F\u7528 <code>for...of</code> \u5FAA\u73AF\u904D\u5386\u67D0\u79CD\u6570\u636E\u7ED3\u6784\u65F6\uFF0C\u8BE5\u5FAA\u73AF\u4F1A\u81EA\u52A8\u53BB\u5BFB\u627E Iterator \u63A5\u53E3\u3002</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">forOf</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> iterator <span class="token operator">=</span> obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>iterator<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not iterable</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>next<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">callback</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    next<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_11-\u6A21\u62DF-set" tabindex="-1">11. \u6A21\u62DF Set <a class="header-anchor" href="#_11-\u6A21\u62DF-set" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">isDef</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> v <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">isIterator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">assert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">condition<span class="token punctuation">,</span> msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">mySet</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDef</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">isIterotar</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Uncaught TypeError: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getType</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not iterable (cannot read property Symbol(Symbol.iterator))</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">get</span> <span class="token function-variable function">size</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

    <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function-variable function">clear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function-variable function">has</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function-variable function">delete</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function-variable function">forEach</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">callbackFn<span class="token punctuation">,</span> thisArg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        thisArg <span class="token operator">=</span> thisArg <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callbackFn<span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_12-deepclone" tabindex="-1">12. deepClone <a class="header-anchor" href="#_12-deepclone" aria-hidden="true">#</a></h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token keyword">return</span> item<span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,34),e=[o];function c(u,l,k,i,r,d){return a(),s("div",null,e)}var w=n(p,[["render",c]]);export{y as __pageData,w as default};
