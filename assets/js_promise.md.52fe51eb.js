import{_ as n,o as s,c as a,a as t}from"./app.c43dc0b4.js";var p="/xo-blog/assets/promise.d71d4687.png";const y='{"title":"\u624B\u5199 Promise","description":"","frontmatter":{},"headers":[{"level":2,"title":"Promise \u72B6\u6001","slug":"promise-\u72B6\u6001"},{"level":2,"title":"then()","slug":"then"},{"level":3,"title":"then\u65B9\u6CD5\u63A5\u53D7\u4E24\u4E2A\u51FD\u6570\u4F5C\u4E3A\u53C2\u6570\uFF0C\u8FD9\u4E24\u4E2A\u53C2\u6570\u662F\u64CD\u4F5C\u6210\u529F/\u5931\u8D25\u65F6\u7684\u56DE\u8C03\u51FD\u6570\u3002","slug":"then\u65B9\u6CD5\u63A5\u53D7\u4E24\u4E2A\u51FD\u6570\u4F5C\u4E3A\u53C2\u6570\uFF0C\u8FD9\u4E24\u4E2A\u53C2\u6570\u662F\u64CD\u4F5C\u6210\u529F-\u5931\u8D25\u65F6\u7684\u56DE\u8C03\u51FD\u6570\u3002"},{"level":3,"title":"then\u65B9\u6CD5\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684 promise \u5BF9\u8C61\u3002","slug":"then\u65B9\u6CD5\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684-promise-\u5BF9\u8C61\u3002"},{"level":2,"title":"catch()","slug":"catch"},{"level":2,"title":"Promise.all()","slug":"promise-all"},{"level":2,"title":"\u603B\u7ED3","slug":"\u603B\u7ED3"},{"level":2,"title":"\u6765\u4E00\u4E2A\u5C0F\u95EE\u9898","slug":"\u6765\u4E00\u4E2A\u5C0F\u95EE\u9898"}],"relativePath":"js/promise.md","lastUpdated":1645672724000}',o={},e=t('<h1 id="\u624B\u5199-promise" tabindex="-1">\u624B\u5199 Promise <a class="header-anchor" href="#\u624B\u5199-promise" aria-hidden="true">#</a></h1><p>Promise \u662F\u5F02\u6B65\u7F16\u7A0B\u7684\u4E00\u79CD\u89E3\u51B3\u65B9\u6848\u3002 ES6 \u5C06\u5176\u7EB3\u5165\u89C4\u8303\uFF0C\u63D0\u4F9B\u4E86\u5185\u7F6E\u7684 Promise \u5BF9\u8C61\u3002Promise \u5BF9\u8C61\u662F\u5F02\u6B65\u64CD\u4F5C\u7684\u6700\u7EC8\u7ED3\u679C\u7684\u5360\u4F4D\u7B26\u3002\u5B83\u8868\u793A\u4E86\u4E00\u4E2A\u6682\u672A\u83B7\u5F97\uFF0C\u4F46\u5728\u672A\u6765\u5373\u5C06\u83B7\u5F97\u7684\u7ED3\u679C\u503C\u3002</p><h2 id="promise-\u72B6\u6001" tabindex="-1">Promise \u72B6\u6001 <a class="header-anchor" href="#promise-\u72B6\u6001" aria-hidden="true">#</a></h2><p>Promise \u5BF9\u8C61\u63A5\u53D7\u4E00\u4E2A\u5E26\u6709<code>resolve</code>\u548C<code>reject</code>\u53C2\u6570\u7684\u51FD\u6570\uFF0C\u51FD\u6570\u5185\u90E8\u64CD\u4F5C\u6267\u884C\u5B8C\u6BD5\u540E\u4F1A\u8C03\u7528<code>resolve</code>\u6216<code>reject</code>\u51FD\u6570\u5C06\u72B6\u6001\u7531 pending \u8F6C\u53D8\u4E3A fulfilled \u6216 rejected\u3002 \u4E00\u4E2A Promise \u5BF9\u8C61\u4E00\u5B9A\u5904\u4E8E\u4EE5\u4E0B\u4E09\u79CD\u72B6\u6001\u4E4B\u4E00\uFF1A</p><ol><li>pending: \u672A\u5B8C\u6210\u72B6\u6001\uFF0C\u6B64\u65F6\u5F02\u6B65\u64CD\u4F5C\u6B63\u5728\u6267\u884C\uFF0C\u5373\u5C06\u8FC7\u6E21\u5230\u5B8C\u6210\u72B6\u6001\u3002</li><li>fulfilled: \u5B8C\u6210\u72B6\u6001\uFF0C\u64CD\u4F5C\u6210\u529F\uFF0C\u4E00\u5B9A\u6709\u4E00\u4E2A\u7ED3\u679C\u503C\uFF0C\u72B6\u6001\u4E0D\u53EF\u518D\u53D8\u5316\u3002</li><li>rejected: \u5B8C\u6210\u72B6\u6001\uFF0C\u64CD\u4F5C\u5931\u8D25\uFF0C\u4E00\u5B9A\u6709\u4E00\u4E2A\u539F\u578B\uFF0C\u72B6\u6001\u4E0D\u53EF\u518D\u53D8\u5316\u3002 <img src="'+p+`" alt=""></li></ol><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&quot;pending&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&quot;pending&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&quot;fulfilled&quot;</span><span class="token punctuation">;</span>
        self<span class="token punctuation">.</span>result <span class="token operator">=</span> value<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&quot;pending&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&quot;rejected&quot;</span><span class="token punctuation">;</span>
        self<span class="token punctuation">.</span>result <span class="token operator">=</span> reason<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="then" tabindex="-1">then() <a class="header-anchor" href="#then" aria-hidden="true">#</a></h2><p>\u4E00\u4E2A Promise \u5BF9\u8C61\u63D0\u4F9B<code>then</code>\u65B9\u6CD5\u6765\u8BBF\u95EE\u5176\u73B0\u5728\u6216\u6700\u7EC8\u7684\u7ED3\u679C(\u6216\u5931\u8D25\u7684\u539F\u56E0)\u3002</p><div class="language-js"><pre><code>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="then\u65B9\u6CD5\u63A5\u53D7\u4E24\u4E2A\u51FD\u6570\u4F5C\u4E3A\u53C2\u6570\uFF0C\u8FD9\u4E24\u4E2A\u53C2\u6570\u662F\u64CD\u4F5C\u6210\u529F-\u5931\u8D25\u65F6\u7684\u56DE\u8C03\u51FD\u6570\u3002" tabindex="-1"><code>then</code>\u65B9\u6CD5\u63A5\u53D7\u4E24\u4E2A\u51FD\u6570\u4F5C\u4E3A\u53C2\u6570\uFF0C\u8FD9\u4E24\u4E2A\u53C2\u6570\u662F\u64CD\u4F5C\u6210\u529F/\u5931\u8D25\u65F6\u7684\u56DE\u8C03\u51FD\u6570\u3002 <a class="header-anchor" href="#then\u65B9\u6CD5\u63A5\u53D7\u4E24\u4E2A\u51FD\u6570\u4F5C\u4E3A\u53C2\u6570\uFF0C\u8FD9\u4E24\u4E2A\u53C2\u6570\u662F\u64CD\u4F5C\u6210\u529F-\u5931\u8D25\u65F6\u7684\u56DE\u8C03\u51FD\u6570\u3002" aria-hidden="true">#</a></h3><ul><li><p><code>onFulfilled</code>\u51FD\u6570\u5728 promise \u72B6\u6001\u53D8\u4E3A fulfilled \u65F6\u8C03\u7528\uFF0C<code>onFulfilled</code>\u63A5\u53D7 promise \u7684\u6700\u7EC8\u7ED3\u679C\u4F5C\u4E3A\u53C2\u6570\u3002\u5982\u679C<code>onFulfilled</code>\u4E0D\u662F\u51FD\u6570\uFF0C\u4F1A\u88AB\u5305\u88C5\u4E3A<code>(x) =&gt; x</code>\u3002</p></li><li><p><code>onRejected</code>\u51FD\u6570\u5728 promise \u72B6\u6001\u53D8\u4E3A rejected \u65F6\u8C03\u7528\uFF0C<code>onRejected</code>\u63A5\u53D7 promise \u7684\u62D2\u7EDD\u539F\u56E0\u4F5C\u4E3A\u53C2\u6570\u3002\u5982\u679C<code>onRejected</code>\u4E0D\u662F\u51FD\u6570\uFF0C\u5219\u4F1A\u88AB\u66FF\u6362\u4E3A<code>Thrower</code>\u51FD\u6570\u3002</p></li></ul><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallBacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallBacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      	<span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">;</span>
                self<span class="token punctuation">.</span>result <span class="token operator">=</span> value<span class="token punctuation">;</span>
                self<span class="token punctuation">.</span>resolveCallBacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&#39;rejected&#39;</span><span class="token punctuation">;</span>
                self<span class="token punctuation">.</span>result <span class="token operator">=</span> reason<span class="token punctuation">;</span>
                self<span class="token punctuation">.</span>rejectCallBacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;rejected&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallBacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallBacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="then\u65B9\u6CD5\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684-promise-\u5BF9\u8C61\u3002" tabindex="-1"><code>then</code>\u65B9\u6CD5\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684 promise \u5BF9\u8C61\u3002 <a class="header-anchor" href="#then\u65B9\u6CD5\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684-promise-\u5BF9\u8C61\u3002" aria-hidden="true">#</a></h3><div class="language-js"><pre><code>promise2 <span class="token operator">=</span> promise1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><ul><li><code>onFulfilled</code>\u8FD4\u56DE\u4E00\u4E2A\u7ED3\u679C\u503C<code>x</code>/undefined\uFF0C\u65B0\u7684 promise \u5BF9\u8C61\u72B6\u6001\u5C06\u4F1A\u53D8\u6210 fulfilled\uFF0C\u5E76\u4E14\u5C06\u8BE5\u7ED3\u679C\u503C\u4F5C\u4E3A\u65B0\u7684 promise \u5BF9\u8C61<code>onFulfilled</code>\u7684\u53C2\u6570\u3002</li><li><code>onFulfilled</code>\u6216<code>onRejected</code>\u629B\u51FA\u4E00\u4E2A\u9519\u8BEF\uFF0C\u65B0\u7684 promise \u5BF9\u8C61\u72B6\u6001\u5C06\u4F1A\u53D8\u6210 rejected\uFF0C\u5E76\u4E14\u5C06\u629B\u51FA\u7684\u9519\u8BEF\u4F5C\u4E3A\u65B0\u7684 promise \u5BF9\u8C61<code>onRejected</code>\u7684\u53C2\u6570\u3002</li><li>\u8FD4\u56DE\u4E00\u4E2A fulfilled \u72B6\u6001\u7684 promise\uFF0C<code>promise2</code>\u4E5F\u662F fulfilled \u72B6\u6001\uFF0C\u5E76\u63A5\u53D7<code>promise1</code>\u7684<code>onFulfilled</code>\u56DE\u8C03\u51FD\u6570\u53C2\u6570\u503C\u4F5C\u4E3A<code>onFulfilled</code>\u56DE\u8C03\u51FD\u6570\u7684\u53C2\u6570\u3002</li><li>\u8FD4\u56DE\u4E00\u4E2A rejected \u72B6\u6001\u7684 promise\uFF0C<code>promise2</code>\u4E5F\u662F rejected \u72B6\u6001\uFF0C\u5E76\u63A5\u53D7<code>promise1</code>\u7684<code>onRejected</code>\u56DE\u8C03\u51FD\u6570\u53C2\u6570\u503C\u4F5C\u4E3A<code>onRejected</code>\u56DE\u8C03\u51FD\u6570\u7684\u53C2\u6570\u3002<br><a href="https://promisesaplus.com/" target="_blank" rel="noopener noreferrer">Promise / A+</a>\u89C4\u8303\u4E2D\u63D0\u4F9B\u4E86 Promise \u76F8\u4E92\u5D4C\u5957\u7684\u64CD\u4F5C\u7684\u8FC7\u7A0B\uFF0C\u4F9D\u7167\u89C4\u8303\uFF0C\u7EE7\u7EED\u5B8C\u5584\u6211\u4EEC\u7684 promise\u3002</li></ul><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">...</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">resolvePromise</span> <span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5982\u679Cpromise\u548Cx\u662F\u540C\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u5219\u53D1\u751F\u4E86\u5FAA\u73AF\u8C03\u7528\uFF0C\u8C03\u7528reject\u51FD\u6570\uFF0C\u5E76\u629B\u51FA\u4E00\u4E2ATypeError</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>promise <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Chaining cycle detected for promise&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// \u786E\u4FDD\u591A\u6B21\u8C03\u7528\u65F6\uFF0C\u53EA\u6709\u7B2C\u4E00\u6B21\u751F\u6548</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;object&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>
                <span class="token comment">// \u5982\u679Cthen\u4E3Afunction\uFF0C\u5219\u4EE5x\u4E3Acontext\u6267\u884Cthen</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token comment">// \u7EE7\u7EED\u89E3\u6790</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> f<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u5982\u679Cthen\u4E0D\u4E3Afunction\uFF0C\u6267\u884Cresolve()</span>
                    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// x \u65E2\u4E0D\u662Fobject\uFF0C\u4E5F\u4E0D\u662Ffucntion\u65F6\uFF0C\u6267\u884Cresolve()</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;fulfilled&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;rejected&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallBacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallBacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="catch" tabindex="-1">catch() <a class="header-anchor" href="#catch" aria-hidden="true">#</a></h2><blockquote><p><code>catch()</code>\u65B9\u6CD5\u8FD4\u56DE\u4E00\u4E2A Promise\uFF0C\u5E76\u4E14\u5904\u7406\u62D2\u7EDD\u7684\u60C5\u51B5\u3002</p></blockquote><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token function-variable function">catch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">onRejected</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="promise-all" tabindex="-1">Promise.all() <a class="header-anchor" href="#promise-all" aria-hidden="true">#</a></h2><blockquote><p><code>Promise.all(iterable)</code>\u65B9\u6CD5\u8FD4\u56DE\u4E00\u4E2A promise \u5B9E\u4F8B\uFF0C<code>iterable</code>\u5185\u6240\u6709\u7684 promise \u90FD resolve\uFF0C\u6216\u4E0D\u5305\u542B promise \u5BF9\u8C61\u65F6\uFF0C\u8BE5 promise \u5B9E\u4F8B resolve\uFF0C\u4EE5<code>iterable</code>\u5185\u6240\u6709\u8FD4\u56DE\u503C\u4E3A\u6570\u7EC4\u4F5C\u4E3A value\uFF1B\u4EFB\u4E00\u4E2A promise reject \u65F6\uFF0C\u8BE5\u5B9E\u4F8B reject\uFF0C\u4EE5\u7B2C\u4E00\u4E2A\u5931\u8D25\u7684 promise reason \u4F5C\u4E3A reson\u3002</p></blockquote><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token function-variable function">all</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">list</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> resolveNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> item<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          item<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>
            resolveNum<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolveNum <span class="token operator">===</span> list<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">resolve</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>
          resolveNum<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>resolveNum <span class="token operator">===</span> list<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u603B\u7ED3" tabindex="-1">\u603B\u7ED3 <a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a></h2><p>Promise \u5C31\u50CF\u4E00\u4E2A\u88C5\u7740\u7A0B\u5E8F\u7684\u7BB1\u5B50\uFF0C\u6211\u4EEC\u4E0D\u9700\u8981\u5173\u6CE8\u7A0B\u5E8F\u5728\u7BB1\u5B50\u5185\u8FD0\u884C\u7684\u8FC7\u7A0B\uFF0C\u7A0B\u5E8F\u5B8C\u6210\u6216\u5931\u8D25\u540E\u603B\u4F1A\u81EA\u52A8\u6253\u5F00\u544A\u77E5\u6211\u4EEC\u6267\u884C\u7684\u7ED3\u679C\u3002\u540C\u65F6\uFF0C\u4E3A\u4E86\u65B9\u4FBF\u5185\u90E8\u7A0B\u5E8F\u4E95\u7136\u6709\u5E8F\u7684\u8FD0\u884C\uFF0CPromise \u5B9A\u4E49\u4E86\u4E09\u79CD\u7BB1\u5B50\u7684\u72B6\u6001\uFF1A\u521D\u59CB\u3001\u5B8C\u6210\u3001\u5931\u8D25\u3002<code>then</code>\u65B9\u6CD5\u7684\u94FE\u5F0F\u8C03\u7528\uFF0C\u5C31\u50CF\u5927\u7BB1\u5B50\u5957\u5C0F\u7BB1\u5B50\u3002\u800C\u901A\u8FC7\u8FD9\u4E09\u79CD\u72B6\u6001\uFF0C\u5B8C\u6210\u7BB1\u5B50\u5185\u90E8\u903B\u8F91\u7684\u81EA\u6D3D\uFF0C\u6EE1\u8DB3\u7BB1\u5B50\u4E4B\u95F4\u7684\u76F8\u4E92\u5D4C\u5957\u3002</p><p>\u5B8C\u6574\u7684 promise \u5B9E\u73B0\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">excutor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&quot;pending&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&quot;pending&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&quot;fullfilled&quot;</span><span class="token punctuation">;</span>
        self<span class="token punctuation">.</span>result <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>resolveCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&quot;pending&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        self<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&quot;rejected&quot;</span><span class="token punctuation">;</span>
        self<span class="token punctuation">.</span>result <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>rejectCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">excutor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>promise <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&quot;chaning cycle detected for promise!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
            x<span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> f<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFullfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&quot;pending&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resolveCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onFullfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onFullfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&quot;fullfilled&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onFullfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">&quot;rejected&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">catch</span><span class="token punctuation">(</span>onRejectd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> onRejectd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token parameter">arrs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> resolveNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      arrs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fn <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> fn<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          fn<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>
            resolveNum<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolveNum <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">resolve</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span>
          resolveNum<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>resolveNum <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u6765\u4E00\u4E2A\u5C0F\u95EE\u9898" tabindex="-1">\u6765\u4E00\u4E2A\u5C0F\u95EE\u9898 <a class="header-anchor" href="#\u6765\u4E00\u4E2A\u5C0F\u95EE\u9898" aria-hidden="true">#</a></h2><p>\u5B9E\u73B0\u4E00\u4E2A\u6279\u91CF\u8BF7\u6C42\u51FD\u6570 multiRequest(urls, maxNum)\uFF0C\u8981\u6C42\u5982\u4E0B\uFF1A</p><ul><li>\u8981\u6C42\u6700\u5927\u5E76\u53D1\u6570 maxNum</li><li>\u6BCF\u5F53\u6709\u4E00\u4E2A\u8BF7\u6C42\u8FD4\u56DE\uFF0C\u5C31\u7559\u4E0B\u4E00\u4E2A\u7A7A\u4F4D\uFF0C\u53EF\u4EE5\u589E\u52A0\u65B0\u7684\u8BF7\u6C42</li><li>\u6240\u6709\u8BF7\u6C42\u5B8C\u6210\u540E\uFF0C\u7ED3\u679C\u6309\u7167 urls \u91CC\u9762\u7684\u987A\u5E8F\u4F9D\u6B21\u6253\u51FA</li></ul><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">requestLimit</span><span class="token punctuation">(</span><span class="token parameter">urls<span class="token punctuation">,</span> limit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> rs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> total <span class="token operator">=</span> urls<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">let</span> resolveNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> current <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;=</span> total<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
      urls<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        rs<span class="token punctuation">[</span>current<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>
        resolveNum<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolveNum <span class="token operator">===</span> total<span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,30),c=[e];function u(l,k,i,r,d,f){return s(),a("div",null,c)}var h=n(o,[["render",u]]);export{y as __pageData,h as default};
