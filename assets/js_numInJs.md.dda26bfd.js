import{_ as n,o as s,c as a,a as t}from"./app.c43dc0b4.js";var p="/xo-blog/assets/numInJs.afd1580d.jpg",o="/xo-blog/assets/numInJsfunc.b385ba81.png";const h='{"title":"\u5C0F\u6570\u7CBE\u5EA6\u4E22\u5931\u7684\u539F\u56E0","description":"","frontmatter":{},"headers":[{"level":2,"title":"Js \u4E2D\u7684\u6570\u5B57\u50A8\u5B58","slug":"js-\u4E2D\u7684\u6570\u5B57\u50A8\u5B58"},{"level":2,"title":"0.1 + 0.2 !== 0.3","slug":"_0-1-0-2-0-3"},{"level":2,"title":"Number.prototype.toFixed()","slug":"number-prototype-tofixed"}],"relativePath":"js/numInJs.md","lastUpdated":1645672724000}',e={},c=t('<h1 id="\u5C0F\u6570\u7CBE\u5EA6\u4E22\u5931\u7684\u539F\u56E0" tabindex="-1">\u5C0F\u6570\u7CBE\u5EA6\u4E22\u5931\u7684\u539F\u56E0 <a class="header-anchor" href="#\u5C0F\u6570\u7CBE\u5EA6\u4E22\u5931\u7684\u539F\u56E0" aria-hidden="true">#</a></h1><p>\u8BA1\u7B97\u673A\u7531\u6676\u4F53\u7BA1\u7EC4\u6210\uFF0C\u6240\u4EE5\u5185\u90E8\u6570\u636E\u7684\u5B58\u50A8\u548C\u8FD0\u7B97\u90FD\u91C7\u7528\u4E8C\u8FDB\u5236\uFF0C\u800C\u6211\u4EEC\u5728\u5B9E\u9645\u751F\u6D3B\u5DE5\u4F5C\u4E2D\uFF0C\u4F7F\u7528\u7684\u662F\u5341\u8FDB\u5236\u3002\u56E0\u6B64\uFF0C\u5BF9\u4E8E\u8BA1\u7B97\u673A\u5728\u8FD0\u7B97\u65F6\u4EA7\u751F\u7684\u7CBE\u5EA6\u95EE\u9898\uFF0C\u672C\u8D28\u4E0A\u662F\u4F7F\u7528\u4E8C\u8FDB\u5236\u6A21\u62DF\u5341\u8FDB\u5236\u8FDB\u884C\u8FD0\u7B97\u4EA7\u751F\u7684\u7CBE\u5EA6\u95EE\u9898\u3002</p><h2 id="js-\u4E2D\u7684\u6570\u5B57\u50A8\u5B58" tabindex="-1">Js \u4E2D\u7684\u6570\u5B57\u50A8\u5B58 <a class="header-anchor" href="#js-\u4E2D\u7684\u6570\u5B57\u50A8\u5B58" aria-hidden="true">#</a></h2><blockquote><p>\u6839\u636E ECMAScript \u6807\u51C6\uFF0CJavaScript \u4E2D\u53EA\u6709\u4E00\u79CD\u6570\u5B57\u7C7B\u578B\uFF1A\u57FA\u4E8E IEEE 754 \u6807\u51C6\u7684\u53CC\u7CBE\u5EA6 64 \u4F4D\u4E8C\u8FDB\u5236\u683C\u5F0F\u7684\u503C\u3002</p></blockquote><p><img src="'+p+'" alt=""> \u5982\u56FE\u6240\u793A\uFF0C64 \u4F4D\u53EF\u5206\u4E3A\u4E09\u90E8\u5206\uFF1A</p><ol><li>\u7B26\u53F7\u4E3A S\uFF1A0 \u4EE3\u8868\u6B63\u6570\uFF0C1 \u4EE3\u8868\u8D1F\u6570</li><li>\u9636\u7801\u4F4D E\uFF1A\u5728\u673A\u5668\u4E2D\u8868\u793A\u4E00\u4E2A\u6D6E\u70B9\u6570\u65F6\u9700\u8981\u7ED9\u51FA\u6307\u6570\uFF0C\u8FD9\u4E2A\u6307\u6570\u7528\u6574\u6570\u5F62\u5F0F\u8868\u793A\uFF0C\u8FD9\u4E2A\u6574\u6570\u53EB\u505A\u9636\u7801\uFF0C\u9636\u7801\u6307\u660E\u4E86\u5C0F\u6570\u70B9\u5728\u6570\u636E\u4E2D\u7684\u4F4D\u7F6E\u3002</li><li>\u5C0F\u6570\u4F4D M\uFF1A**\u8D85\u51FA\u90E8\u5206\u81EA\u52A8 0 \u820D 1 **</li></ol><p>IEEE 754 \u6807\u51C6\u89C4\u5B9A\u7684\u4E8C\u8FDB\u5236\u8868\u73B0\u4E3A\uFF1A <img src="'+o+`" alt=""></p><p>\u4E3A\u4EC0\u4E48<code>E-1023</code>\uFF0C<code>M+1</code>\u5462\uFF1F</p><p>\u8BA1\u7B97\u673A\u4E2D\u5B9E\u9645\u50A8\u5B58\u6570\u5B57\u65F6\uFF0C\u9075\u5FAA\u79D1\u5B66\u8BA1\u6570\u6CD5\uFF08\u5982\u4E0A\u56FE\u6240\u793A\uFF09\uFF0C\u4E14\u6574\u6570\u4F4D\u4E3A 1\u3002</p><ul><li><code>E-1023</code><br> \u79D1\u5B66\u8BA1\u6570\u6CD5\u4E2D\u7684\u6307\u6570\u4F4D\u662F\u5141\u8BB8\u4E3A\u8D1F\u7684\uFF0C\u8BA1\u7B97\u673A\u5E95\u5C42\u53EA\u53EF\u4EE5\u8FDB\u884C\u52A0\u6CD5\u8FD0\u7B97\uFF0C\u56E0\u6B64\u5F15\u5165\u504F\u79FB\u91CF\u8868\u793A\u8D1F\u6570\uFF0C\u7EA6\u5B9A\u9636\u7801\u51CF\u53BB 1023\uFF0C[0,1022]\u8868\u793A\u4E3A\u8D1F\uFF0C[1024,2047]\u8868\u793A\u4E3A\u6B63\u3002</li><li><code>M+1</code><br> \u6574\u6570\u4F4D\u56FA\u5B9A\u4E3A 1\uFF0C\u6240\u4EE5\u50A8\u5B58\u65F6\u820D\u53BB\u3002M \u7684\u56FA\u5B9A\u957F\u5EA6\u52A0\u4E0A\u88AB\u7701\u7565\u7684\u6574\u6570\u4F4D\u4E3A 53\uFF0C\u56E0\u6B64\u6709<code>Number.MAX_SAFE_INTEGER === Math.pow(2, 53) - 1</code>,\u800C\u975E<code>Number.MAX_SAFE_INTEGER === Math.pow(2, 52) - 1</code>\u3002</li></ul><h2 id="_0-1-0-2-0-3" tabindex="-1">0.1 + 0.2 !== 0.3 <a class="header-anchor" href="#_0-1-0-2-0-3" aria-hidden="true">#</a></h2><p>\u5C0F\u6570\u4F4D\u8D85\u51FA 52 \u65F6\u4F1A\u81EA\u52A8 0 \u820D 1 \u5165\uFF0C\u52A0\u4E0A\u9690\u542B\u7684\u6574\u6570\u4F4D\uFF0CJs \u4E2D\u5C0F\u6570\u4F4D\u7684\u957F\u5EA6\u4E3A\uFF1A</p><div class="language-js"><pre><code>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 16</span>
</code></pre></div><p>0.1 \u8F6C\u6362\u4E3A\u4E8C\u8FDB\u5236\u4E3A\uFF1A<code>0.00011...0011</code>\uFF0C0.2 \u8F6C\u6362\u4E3A\u4E8C\u8FDB\u5236\u4E3A<code>0.0011...0011</code>\uFF0C0.1 + 0.2 \u4E3A<code>0.010011...0011</code>\uFF0C\u4F7F\u7528\u6574\u6570\u4E3A 1\uFF0C\u79D1\u5B66\u8BA1\u6570\u6CD5\u7684\u5F62\u5F0F(\u4E0D\u8003\u8651\u504F\u79FB\u91CF\u8868\u73B0\u5F62\u5F0F)\u8868\u793A\u4E3A<code>1.00110011...0011x2^-2</code>\uFF0C\u6B64\u65F6<code>00110011...0011</code>\u7B2C 53 \u4F4D\u4E3A<code>1</code>\uFF0C0 \u820D 1 \u5165\uFF0C\u5C0F\u6570\u90E8\u4F4D\u7684\u503C\u4F4D<code>00110011...0011010</code>\uFF0C\u8F6C\u6362\u4E3A\u5341\u8FDB\u5236\u540E\u4E3A<code>0.30000000000000004</code>\uFF0C\u6240\u4EE5\uFF1A<code>0.1 + 0.2 !== 0.3</code>\u3002</p><h2 id="number-prototype-tofixed" tabindex="-1">Number.prototype.toFixed() <a class="header-anchor" href="#number-prototype-tofixed" aria-hidden="true">#</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed" target="_blank" rel="noopener noreferrer">MDN</a>\u4E2D\u5BF9<code>toFixed()</code>\u7684\u63CF\u8FF0\uFF1A</p><blockquote><p>\u4E00\u4E2A\u6570\u503C\u7684\u5B57\u7B26\u4E32\u8868\u73B0\u5F62\u5F0F\uFF0C\u4E0D\u4F7F\u7528\u6307\u6570\u8BB0\u6570\u6CD5\uFF0C\u800C\u662F\u5728\u5C0F\u6570\u70B9\u540E\u6709 digits\uFF08\u6CE8\uFF1Adigits \u5177\u4F53\u503C\u53D6\u51B3\u4E8E\u4F20\u5165\u53C2\u6570\uFF09\u4F4D\u6570\u5B57\u3002\u8BE5\u6570\u503C\u5728\u5FC5\u8981\u65F6\u8FDB\u884C\u56DB\u820D\u4E94\u5165\uFF0C\u53E6\u5916\u5728\u5FC5\u8981\u65F6\u4F1A\u7528 0 \u6765\u586B\u5145\u5C0F\u6570\u90E8\u5206\uFF0C\u4EE5\u4FBF\u5C0F\u6570\u90E8\u5206\u6709\u6307\u5B9A\u7684\u4F4D\u6570\u3002 \u5982\u679C\u6570\u503C\u5927\u4E8E 1e+21\uFF0C\u8BE5\u65B9\u6CD5\u4F1A\u7B80\u5355\u8C03\u7528 Number.prototype.toString()\u5E76\u8FD4\u56DE\u4E00\u4E2A\u6307\u6570\u8BB0\u6570\u6CD5\u683C\u5F0F\u7684\u5B57\u7B26\u4E32\u3002<br> \u63CF\u8FF0\u4E2D\u63D0\u5230\uFF1A \u8BE5\u6570\u503C\u5728\u5FC5\u8981\u65F6\u8FDB\u884C\u56DB\u820D\u4E94\u5165<br> \u6211\u4EEC\u6765\u6D4B\u8BD5\u4E00\u4E0B\uFF1A</p></blockquote><div class="language-js"><pre><code><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">1.245</span><span class="token punctuation">;</span>
num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1.2&#39;</span>
num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;1.25&#39;</span>
</code></pre></div><p><strong>\u4E3A\u4EC0\u4E48<code>num.toFixed(2)</code>\u7684\u503C\u4E3A<code>1.2</code>\uFF0C\u800C\u4E0D\u662F<code>1.3</code>\u5462\uFF1F</strong> \u6211\u4EEC\u6765\u770B\u4E00\u4E0B<a href="https://github.com/v8/v8/blob/4b9b23521e6fd42373ebbcb20ebe03bf445494f9/src/fixed-dtoa.cc#L242" target="_blank" rel="noopener noreferrer">v8 \u6E90\u7801</a>\u4E2D\u5BF9\u5C0F\u6570\u4F4D\u64CD\u4F5C\u7684\u4E00\u6BB5\uFF1A</p><div class="language-cpp"><pre><code><span class="token comment">// The given fractionals number represents a fixed-point number with binary</span>
<span class="token comment">// point at bit (-exponent).</span>
<span class="token comment">// Preconditions:</span>
<span class="token comment">//   -128 &lt;= exponent &lt;= 0.</span>
<span class="token comment">//   0 &lt;= fractionals * 2^exponent &lt; 1</span>
<span class="token comment">//   The buffer holds the result.</span>
<span class="token comment">// The function will round its result. During the rounding-process digits not</span>
<span class="token comment">// generated by this function might be updated, and the decimal-point variable</span>
<span class="token comment">// might be updated. If this function generates the digits 99 and the buffer</span>
<span class="token comment">// already contained &quot;199&quot; (thus yielding a buffer of &quot;19999&quot;) then a</span>
<span class="token comment">// rounding-up will change the contents of the buffer to &quot;20000&quot;.</span>
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">FillFractionals</span><span class="token punctuation">(</span><span class="token keyword">uint64_t</span> fractionals<span class="token punctuation">,</span> <span class="token keyword">int</span> exponent<span class="token punctuation">,</span>
                            <span class="token keyword">int</span> fractional_count<span class="token punctuation">,</span> Vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> buffer<span class="token punctuation">,</span>
                            <span class="token keyword">int</span><span class="token operator">*</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> decimal_point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">DCHECK</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">128</span> <span class="token operator">&lt;=</span> exponent <span class="token operator">&amp;&amp;</span> exponent <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// &#39;fractionals&#39; is a fixed-point number, with binary point at bit</span>
  <span class="token comment">// (-exponent). Inside the function the non-converted remainder of fractionals</span>
  <span class="token comment">// is a fixed-point number, with binary point at bit &#39;point&#39;.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span>exponent <span class="token operator">&lt;=</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// One 64 bit number is sufficient.</span>
    <span class="token function">DCHECK_EQ</span><span class="token punctuation">(</span>fractionals <span class="token operator">&gt;&gt;</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token operator">-</span>exponent<span class="token punctuation">;</span>
    <span class="token comment">// \u5C06\u524D[fractional]\u4F4D\u5C0F\u6570\u8F6C\u6210\u5B57\u7B26\u4E32</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fractional_count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fractionals <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token comment">// Instead of multiplying by 10 we multiply by 5 and adjust the point</span>
      <span class="token comment">// location. This way the fractionals variable will not overflow.</span>
      <span class="token comment">// Invariant at the beginning of the loop: fractionals &lt; 2^point.</span>
      <span class="token comment">// Initially we have: point &lt;= 64 and fractionals &lt; 2^56</span>
      <span class="token comment">// After each iteration the point is decremented by one.</span>
      <span class="token comment">// Note that 5^3 = 125 &lt; 128 = 2^7.</span>
      <span class="token comment">// Therefore three iterations of this loop will not overflow fractionals</span>
      <span class="token comment">// (even without the subtraction at the end of the loop body). At this</span>
      <span class="token comment">// time point will satisfy point &lt;= 61 and therefore fractionals &lt; 2^point</span>
      <span class="token comment">// and any further multiplication of fractionals by 5 will not overflow.</span>
      fractionals <span class="token operator">*=</span> <span class="token number">5</span><span class="token punctuation">;</span>
      point<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> digit <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>fractionals <span class="token operator">&gt;&gt;</span> point<span class="token punctuation">)</span><span class="token punctuation">;</span>
      buffer<span class="token punctuation">[</span><span class="token operator">*</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">+</span> digit<span class="token punctuation">;</span>
      <span class="token punctuation">(</span><span class="token operator">*</span>length<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
      fractionals <span class="token operator">-=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">uint64_t</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>digit<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> point<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// [fractionals + 1]\u4F4D0\u820D1\u5165</span>
    <span class="token comment">// If the first bit after the point is set we have to round up.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>point <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fractionals <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>point <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">DtoaRoundUp</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> length<span class="token punctuation">,</span> decimal_point<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// We need 128 bits.</span>
    <span class="token function">DCHECK</span><span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">&lt;</span> <span class="token operator">-</span>exponent <span class="token operator">&amp;&amp;</span> <span class="token operator">-</span>exponent <span class="token operator">&lt;=</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    UInt128 fractionals128 <span class="token operator">=</span> <span class="token function">UInt128</span><span class="token punctuation">(</span>fractionals<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fractionals128<span class="token punctuation">.</span><span class="token function">Shift</span><span class="token punctuation">(</span><span class="token operator">-</span>exponent <span class="token operator">-</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fractional_count<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fractionals128<span class="token punctuation">.</span><span class="token function">IsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token comment">// As before: instead of multiplying by 10 we multiply by 5 and adjust the</span>
      <span class="token comment">// point location.</span>
      <span class="token comment">// This multiplication will not overflow for the same reasons as before.</span>
      fractionals128<span class="token punctuation">.</span><span class="token function">Multiply</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      point<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> digit <span class="token operator">=</span> fractionals128<span class="token punctuation">.</span><span class="token function">DivModPowerOf2</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>
      buffer<span class="token punctuation">[</span><span class="token operator">*</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">+</span> digit<span class="token punctuation">;</span>
      <span class="token punctuation">(</span><span class="token operator">*</span>length<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fractionals128<span class="token punctuation">.</span><span class="token function">BitAt</span><span class="token punctuation">(</span>point <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">DtoaRoundUp</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> length<span class="token punctuation">,</span> decimal_point<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u5B9E\u9645\u4E0A\uFF0C<code>toFixed(n)</code>\u4F1A\u5148\u8BA1\u7B97\u51FA\u76F8\u5E94\u7684\u4E8C\u8FDB\u5236\u4FDD\u7559\u4F4D\u6570 f\uFF0C\u5C06\u524D f \u4F4D\u4E8C\u8FDB\u5236\u5C0F\u6570\u8F6C\u6362\u6210\u5B57\u7B26\u4E32\uFF0C\u518D\u67E5\u770B f+1 \u4F4D\u6570\u503C\uFF0C\u8FDB 1 \u53D6 0\u3002 \u56E0\u6B64\u624D\u4F1A\u6709\uFF1A<code>toFixed(n)</code>\u7684\u7ED3\u679C\u5728<strong>\u5FC5\u8981\u65F6</strong>\u624D\u4F1A\u8FDB\u884C\u56DB\u820D\u4E94\u5165\u3002</p>`,21),l=[c];function i(u,r,k,d,m,f){return s(),a("div",null,l)}var g=n(e,[["render",i]]);export{h as __pageData,g as default};
